---
name: Pull Request

on:
  # Enable manual running of action if necessary
  workflow_dispatch:
  # Build and test deployment the image on pushes to main branch
  pull_request:
    # Only publish on push to main branch
    branches:
      - main
    # Only run if the PR yaml has changed or a Dockerfile has changed
    paths:
      - Dockerfile**
      - "**on_pr.yml"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  hadolint:
    name: Run hadolint against docker files
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Pull hadolint/hadolint:latest Image
        run: docker pull hadolint/hadolint:latest
      - name: Run hadolint against Dockerfiles
        run: docker run --rm -i -v "$PWD":/workdir --workdir /workdir --entrypoint hadolint hadolint/hadolint --ignore DL3003 --ignore DL3006 --ignore DL3010 --ignore DL4001 --ignore DL3007 --ignore DL3008 --ignore SC2068 --ignore DL3007 --ignore SC1091 --ignore DL3013 --ignore DL3010 $(find . -type f -iname "Dockerfile*")

  changed_files:
    name: Get changed files
    runs-on: ubuntu-22.04
    outputs:
      force_build: "true"
      basefile_changed: ${{ steps.changed-files-specific.outputs.any_changed }}
      mlatclient_changed: ${{ steps.changed-files-mlatclient.outputs.any_changed }}
      rtlsdr_changed: ${{ steps.changed-files-rtlsdr.outputs.any_changed }}
      planefence_base_changed: ${{ steps.changed-files-planefence_base.outputs.any_changed }}
      acarsdecoder_changed: ${{ steps.changed-files-acarsdecoder.outputs.any_changed }}
      soapy_changed: ${{ steps.changed-files-soapy.outputs.any_changed }}
      wreadsb_changed: ${{ steps.changed-files-wreadsb.outputs.any_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - name: Check basefile change
        id: changed-files-specific
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: |
            Dockerfile.base

      - name: Check mlatclient change
        id: changed-files-mlatclient
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: |
            Dockerfile.mlatclient
            Dockerfile.base

      - name: Check rtlsdr change
        id: changed-files-rtlsdr
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: |
            Dockerfile.rtlsdr
            Dockerfile.base

      - name: Check planefence_base change
        id: changed-files-planefence_base
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: |
            Dockerfile.planefence_base
            Dockerfile.base

      - name: Check for acars decoder
        id: changed-files-acarsdecoder
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: |
            Dockerfile.acars-decoder
            Dockerfile.rtlsdr
            Dockerfile.base

      - name: Check for soapy
        id: changed-files-soapy
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: |
            Dockerfile.soapy-full
            Dockerfile.rtlsdr
            Dockerfile.base

      - name: Check for wreadsb
        id: changed-files-wreadsb
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: |
            Dockerfile.wreadsb
            Dockerfile.mlatclient
            Dockerfile.rtlsdr
            Dockerfile.base

  # Basefile
  deploy_ghcr_base:
    if: ${{ needs.changed_files.outputs.basefile_changed == 'true' || needs.changed_files.outputs.force_build == 'true' }}
    name: Base
    # Define any dependent steps
    needs: [hadolint, changed_files]
    # Define dockerfile and image tag
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: base-test-pr
      build_baseimage_test: false
      build_baseimage_url: :base/:base-test-pr
      docker_build_file: Dockerfile.base
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}


  # Next steps are all of the deployments that depend on the base image
  deploy_ghcr_mlat_client:
    if: ${{ needs.changed_files.outputs.mlatclient_changed == 'true' || needs.changed_files.outputs.force_build == 'true' }}
    needs: [deploy_ghcr_base, changed_files]
    name: Mlat Client
    # Define any dependent steps
    # Define dockerfile and image tag
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: mlatclient-test-pr
      build_baseimage_test: true
      build_baseimage_url: :base/:base-test-pr
      docker_build_file: Dockerfile.mlatclient
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  deploy_ghcr_rtlsdr:
    if: ${{ needs.changed_files.outputs.rtlsdr_changed == 'true' || needs.changed_files.outputs.force_build == 'true' }}
    name: RTLSDR
    # Define any dependent steps
    needs: [deploy_ghcr_base, changed_files]
    # Define dockerfile and image tag
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: rtlsdr-test-pr
      build_baseimage_test: true
      build_baseimage_url: :base/:base-test-pr
      docker_build_file: Dockerfile.rtlsdr
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  deploy_ghcr_planefence_base:
    if: ${{ needs.changed_files.outputs.planefence_base_changed == 'true' || needs.changed_files.outputs.force_build == 'true' }}
    name: Planefence
    # Define any dependent steps
    needs: [deploy_ghcr_base, changed_files]
    # Define dockerfile and image tag
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: planefence_base-test-pr
      build_baseimage_test: true
      build_baseimage_url: :base/:base-test-pr
      docker_build_file: Dockerfile.planefence_base
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  # deployments that only rely on rtlsdr

  deploy_ghcr_acars-decoder:
    if: ${{ needs.changed_files.outputs.acarsdecoder_changed == 'true' || needs.changed_files.outputs.force_build == 'true' }}
    name: ACARS Decoder
    # Define any dependent steps
    needs: [deploy_ghcr_rtlsdr, changed_files]
    # Define dockerfile and image tag
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: acars-decoder-test-pr
      build_baseimage_test: true
      build_baseimage_url: :rtlsdr/:rtlsdr-test-pr
      docker_build_file: Dockerfile.acars-decoder
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  deploy_ghcr_soapy_full:
    if: ${{ needs.changed_files.outputs.soapy_changed == 'true' || needs.changed_files.outputs.force_build == 'true' }}
    name: Soapy Full
    # Define any dependent steps
    needs: [deploy_ghcr_rtlsdr, changed_files]
    # Define dockerfile and image tag
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: soapy-full-test-pr
      build_baseimage_test: true
      build_baseimage_url: :rtlsdr/:rtlsdr-test-pr
      docker_build_file: Dockerfile.soapy-full
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  # deployments that rely on rtlsdr AND mlatclient

  deploy_ghcr_wreadsb:
    if: ${{ needs.changed_files.outputs.wreadsb_changed == 'true' || needs.changed_files.outputs.force_build == 'true' }}
    name: Wreadsb
    # Define any dependent steps
    needs: [deploy_ghcr_rtlsdr, deploy_ghcr_mlat_client, changed_files]
    # Define dockerfile and image tag
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: wreadsb-test-pr
      build_baseimage_test: true
      build_baseimage_url: :mlatclient/:mlatclient-test-pr,/g;s/:rtlsdr/:rtlsdr-test-pr
      docker_build_file: Dockerfile.wreadsb
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}
  # deploy_ghcr_acars-decoder-soapy:
  #   name: Test deploy acars-decoder-soapy to ghcr.io
  #   # Define any dependent steps
  #   needs: [deploy_soapy-full]
  #   # Define dockerfile and image tag
  #   env:
  #     DOCKERFILE: Dockerfile.acars-decoder-soapy
  #     TAG: acars-decoder-soapy
  #   runs-on: ubuntu-22.04
  #   permissions:
  #     contents: read
  #     packages: write
  #   # Define output (used to clean-up PR images pushed to ghcr.io)
  #   outputs:
  #     cleanupinfo: ${{ steps.set-output.outputs.cleanupinfo }}
  #   steps:
  #     # Check out our code
  #     - name: Checkout
  #       uses: actions/checkout@v4.2.2
  #       with:
  #         fetch-depth: 0
  #     # List of files to check to trigger a rebuild on this job
  #     - name: Get specific changed files
  #       id: changed-files-specific
  #       uses: tj-actions/changed-files@v46.0.5
  #       # Add dependent dockerfiles below the ${{ env.DOCKERFILE }} entry, one per line
  #       with:
  #         files: |
  #           Dockerfile.base
  #           Dockerfile.rtlsdr
  #           Dockerfile.soapy-full
  #           Dockerfile.acars-decoder-soapy
  #     - name: Get changed status of parent
  #       id: changed-files-parent
  #       uses: tj-actions/changed-files@v46.0.5
  #       # Add dependent dockerfiles, one per line
  #       with:
  #         files: |
  #           Dockerfile.base
  #           Dockerfile.rtlsdr
  #           Dockerfile.soapy-full
  #           Dockerfile.acars-decoder-soapy
  #     # Log into ghcr (so we can push images)
  #     - name: Login to ghcr.io
  #       if: steps.changed-files-specific.outputs.any_changed == 'true'
  #       uses: docker/login-action@v3.4.0
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     # Get metadata from repo
  #     - name: Extract metadata (tags, labels) for Docker
  #       if: steps.changed-files-specific.outputs.any_changed == 'true'
  #       id: meta
  #       uses: docker/metadata-action@v5.7.0
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #     # Set up QEMU for multi-arch builds
  #     - name: Set up QEMU
  #       if: steps.changed-files-specific.outputs.any_changed == 'true'
  #       uses: docker/setup-qemu-action@v3.6.0
  #     # Patch dockerfile to pull from PR-generated image
  #     - name: Patch dockerfile
  #       if: steps.changed-files-parent.outputs.any_changed == 'true'
  #       id: patch-dockerfile
  #       env:
  #         SED_SEARCH: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         SED_TO_APPEND: -test-pr
  #       run: |
  #         set -x
  #         sed -i "s|^FROM ${SED_SEARCH}[^ ]*|\0${SED_TO_APPEND}|" "$DOCKERFILE"
  #         grep '^FROM ' "$DOCKERFILE"
  #     # Set up buildx for multi platform builds
  #     - name: Set up Docker Buildx
  #       if: steps.changed-files-specific.outputs.any_changed == 'true'
  #       id: buildx
  #       uses: docker/setup-buildx-action@v3.10.0
  #     # Build & Push
  #     - name: Test Build & Push ${{ env.IMAGE_NAME }}:${{ env.TAG }}
  #       if: steps.changed-files-specific.outputs.any_changed == 'true'
  #       uses: docker/build-push-action@v6.18.0
  #       with:
  #         context: .
  #         file: ${{ env.DOCKERFILE }}
  #         no-cache: true
  #         platforms: linux/amd64,linux/arm/v7,linux/arm64
  #         push: true
  #         # Append "-test-pr-XXX" to image name
  #         tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}-test-pr
  #         labels: ${{ steps.meta.outputs.labels }}
  #     # Set output variable for dynamic matrix in clean-up steps
  #     - name: Set clean-up info
  #       if: steps.changed-files-specific.outputs.any_changed == 'true'
  #       id: set-output
  #       run: echo "cleanupinfo=$TAG" >> $GITHUB_OUTPUT

  # deploy_dump978-full:
  #   name: Test deploy dump978-full to ghcr.io
  #   # Define any dependent steps
  #   needs: [deploy_wreadsb]
  #   # Define dockerfile and image tag
  #   env:
  #     DOCKERFILE: Dockerfile.dump978-full
  #     TAG: dump978-full
  #   runs-on: ubuntu-22.04
  #   permissions:
  #     contents: read
  #     packages: write
  #   # Define output (used to clean-up PR images pushed to ghcr.io)
  #   outputs:
  #     cleanupinfo: ${{ steps.set-output.outputs.cleanupinfo }}
  #   steps:
  #     # Check out our code
  #     - name: Checkout
  #       uses: actions/checkout@v4.2.2
  #       with:
  #         fetch-depth: 0
  #     # List of files to check to trigger a rebuild on this job
  #     - name: Get specific changed files
  #       id: changed-files-specific
  #       uses: tj-actions/changed-files@v46.0.5
  #       with:
  #         files: |
  #           Dockerfile.dump978-full
  #           Dockerfile.base
  #           Dockerfile.rtlsdr
  #     - name: Get changed status of parent
  #       id: changed-files-parent
  #       uses: tj-actions/changed-files@v46.0.5
  #       # Add dependent dockerfiles, one per line
  #       with:
  #         files: |
  #           Dockerfile.base
  #           Dockerfile.rtlsdr
  #     # Log into ghcr (so we can push images)
  #     - name: Login to ghcr.io
  #       if: steps.changed-files-specific.outputs.any_changed == 'true'
  #       uses: docker/login-action@v3.4.0
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     # Get metadata from repo
  #     - name: Extract metadata (tags, labels) for Docker
  #       if: steps.changed-files-specific.outputs.any_changed == 'true'
  #       id: meta
  #       uses: docker/metadata-action@v5.7.0
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #     # Set up QEMU for multi-arch builds
  #     - name: Set up QEMU
  #       if: steps.changed-files-specific.outputs.any_changed == 'true'
  #       uses: docker/setup-qemu-action@v3.6.0
  #     # Patch dockerfile to pull from PR-generated image
  #     - name: Patch dockerfile
  #       if: steps.changed-files-parent.outputs.any_changed == 'true'
  #       id: patch-dockerfile
  #       env:
  #         SED_SEARCH: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         SED_TO_APPEND: -test-pr
  #       run: |
  #         set -x
  #         sed -i "s|^FROM ${SED_SEARCH}[^ ]*|\0${SED_TO_APPEND}|" "$DOCKERFILE"
  #         grep '^FROM ' "$DOCKERFILE"
  #     # Set up buildx for multi platform builds
  #     - name: Set up Docker Buildx
  #       if: steps.changed-files-specific.outputs.any_changed == 'true'
  #       id: buildx
  #       uses: docker/setup-buildx-action@v3.10.0
  #     # Build & Push
  #     - name: Build & Push ghcr.io/sdr-enthusiasts/docker-baseimage:dump978-full
  #       if: steps.changed-files-specific.outputs.any_changed == 'true'
  #       uses: docker/build-push-action@v6.18.0
  #       with:
  #         context: .
  #         file: ./Dockerfile.dump978-full
  #         no-cache: true
  #         platforms: linux/amd64,linux/arm/v7,linux/arm64
  #         push: true
  #         # Append "-test-pr-XXX" to image name
  #         tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}-test-pr
  #         labels: ${{ steps.meta.outputs.labels }}
  #     # Set output variable for dynamic matrix in clean-up steps
  #     - name: Set clean-up info
  #       if: steps.changed-files-specific.outputs.any_changed == 'true'
  #       id: set-output
  #       run: echo "cleanupinfo=$TAG" >> $GITHUB_OUTPUT



  # trigger_build_sdr-enthusiasts_docker-acarsdec:
  #   name: Trigger deploy of sdr-enthusiasts/docker-acarsdec
  #   needs: [deploy_ghcr_acars-decoder-soapy]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-acarsdec
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_docker-dumpvdl2:
  #   name: Trigger deploy of sdr-enthusiasts/docker-dumpvdl2
  #   needs: [deploy_ghcr_acars-decoder-soapy]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-dumpvdl2
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_docker-vdlm2dec:
  #   name: Trigger deploy of sdr-enthusiasts/docker-vdlm2dec
  #   needs: [deploy_ghcr_acars-decoder-soapy]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-vdlm2dec
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_docker-dumphfdl:
  #   name: Trigger deploy of sdr-enthusiasts/docker-dumphfdl
  #   needs: [deploy_ghcr_acars-decoder-soapy]
  #   runs-on: ubuntu-22.04
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-dumphfdl
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_docker-hfdlobserver:
  #   name: Trigger deploy of sdr-enthusiasts/docker-hfdlobserver
  #   needs: [deploy_ghcr_acars-decoder-soapy]
  #   runs-on: ubuntu-22.04
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-hfdlobserver
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref master --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_docker-acarshub:
  #   name: Trigger deploy of sdr-enthusiasts/docker-acarshub
  #   needs: [deploy_ghcr_base]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-acarshub
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_docker-planefence:
  #   name: Trigger deploy of sdr-enthusiasts/docker-planefence
  #   needs: [deploy_planefence_base]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-planefence
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_docker-airnavradar:
  #   name: Trigger deploy of sdr-enthusiasts/docker-airnavradar
  #   needs: [deploy_wreadsb, deploy_ghcr_mlat_client]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-airnavradar
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_beast-splitter:
  #   name: Trigger deploy of sdr-enthusiasts/docker-beast-splitter
  #   needs: [deploy_ghcr_base]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-beast-splitter
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_docker-flightradar24:
  #   name: Trigger deploy of sdr-enthusiasts/docker-flightradar24
  #   needs: [deploy_ghcr_base]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-flightradar24
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_docker-radarvirtuel:
  #   name: Trigger deploy of sdr-enthusiasts/docker-radarvirtuel
  #   needs: [deploy_wreadsb, deploy_ghcr_mlat_client]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-radarvirtuel
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_docker-tar1090:
  #   name: Trigger deploy of sdr-enthusiasts/docker-tar1090
  #   needs: [deploy_wreadsb, deploy_ghcr_mlat_client]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-tar1090
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_docker-dump978:
  #   name: Trigger deploy of sdr-enthusiasts/docker-dump978
  #   needs: [deploy_dump978-full]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-dump978
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_docker-piaware:
  #   name: Trigger deploy of sdr-enthusiasts/docker-piaware
  #   needs: [deploy_dump978-full]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-piaware
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # # trigger_build_sdr-enthusiasts_adsbexchange:
  # #   name: Trigger deploy of sdr-enthusiasts/docker-adsbexchange
  # #   needs: [deploy_wreadsb]
  # #   runs-on: ubuntu-22.04
  # #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  # #   env:
  # #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  # #     WORKFLOW_REPO: sdr-enthusiasts/docker-adsbexchange
  # #     WORKFLOW_FILE: deploy.yml
  # #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-adsbexchange"
  # #   steps:
  # #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  # #       run: |
  # #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  # #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_adsbhub:
  #   name: Trigger deploy of sdr-enthusiasts/docker-adsbhub
  #   needs: [deploy_ghcr_base]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-adsbhub
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-adsbhub"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_opensky_network:
  #   name: Trigger deploy of sdr-enthusiasts/docker-opensky-network
  #   needs: [deploy_ghcr_base]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-opensky-network
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-opensky-network"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_planefinder:
  #   name: Trigger deploy of sdr-enthusiasts/docker-planefinder
  #   needs: [deploy_ghcr_base]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-planefinder
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-planefinder"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_acars_router:
  #   name: Trigger deploy of sdr-enthusiasts/acars_router
  #   needs: [deploy_ghcr_base]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/acars_router
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_rtlsdrairband:
  #   name: Trigger deploy of sdr-enthusiasts/docker-rtlsdrairband
  #   needs: [deploy_ghcr_acars-decoder-soapy]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-rtlsdrairband
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-rtlsdrairband"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_sdrplay_beast1090:
  #   name: Trigger deploy of sdr-enthusiasts/docker-sdrplay-beast1090
  #   needs: [deploy_ghcr_rtlsdr, deploy_wreadsb]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-sdrplay-beast1090
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-sdrplay-beast1090"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_airspy_adsb:
  #   name: Trigger deploy of sdr-enthusiasts/airspy_adsb
  #   needs: [deploy_ghcr_base]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/adsb_airspy
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/adsb_airspy"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_acars-oxide:
  #   name: Trigger deploy of sdr-enthusiasts/acars-oxide
  #   needs: [deploy_ghcr_rtlsdr]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/acars-oxide
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/acars-oxide"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_reverse_web_proxy:
  #   name: Trigger deploy of sdr-enthusiasts/docker-reversewebproxy
  #   needs: [deploy_ghcr_base]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-reversewebproxy
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-reversewebproxy"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_radar1090:
  #   name: Trigger deploy of sdr-enthusiasts/docker-radar1090
  #   needs: [deploy_ghcr_base]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-radar1090
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-radar1090"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_flightairmap:
  #   name: Trigger deploy of sdr-enthusiasts/docker-flightairmap
  #   needs: [deploy_ghcr_base]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-flightairmap
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-flightairmap"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref master --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_shipfeeder:
  #   name: Trigger deploy of sdr-enthusiasts/docker-shipfeeder
  #   needs: [deploy_ghcr_rtlsdr]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-shipfeeder
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-shipfeeder"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_aprstracker:
  #   name: Trigger deploy of sdr-enthusiasts/docker-aprs-tracker
  #   needs: [deploy_ghcr_rtlsdr]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-aprs-tracker
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-aprs-tracker"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_vesselalert:
  #   name: Trigger deploy of sdr-enthusiasts/docker-vesselalert
  #   needs: [deploy_ghcr_rtlsdr]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-vesselalert
  #     WORKFLOW_FILE: deploy.yml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-vesselalert"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true

  # trigger_build_sdr-enthusiasts_docker-sdrmap:
  #   name: Trigger deploy of sdr-enthusiasts/docker-sdrmap
  #   needs: [deploy_wreadsb, deploy_ghcr_mlat_client]
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
  #   env:
  #     WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  #     WORKFLOW_REPO: sdr-enthusiasts/docker-sdrmap
  #     WORKFLOW_FILE: deploy.yaml
  #     WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-sdrmap"
  #   steps:
  #     - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
  #       run: |
  #         echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
  #         gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON" -f use_test_image=true
