---
name: Deploy

on:
  # Enable manual running of action if necessary
  workflow_dispatch:
    inputs:
      reason:
        required: true
        description: "Reason for running this workflow"
      disable_upstream_triggers:
        required: false
        type: boolean
        description: "Rebuild the base images but don't trigger downstream builds"
        default: false
  # disable deploy on push, only deployed manually as this build will trigger
  # tons of other rebuilds
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_MIKENYE }}
  WORKFLOW_REASON: "triggered via deploy_ghcr.yml in sdr-enthusiasts/docker-baseimage"

jobs:
  hadolint:
    name: Run hadolint against docker files
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Pull hadolint/hadolint:latest Image
        run: docker pull hadolint/hadolint:latest
      - name: Run hadolint against Dockerfiles
        run: docker run --rm -i -v "$PWD":/workdir --workdir /workdir --entrypoint hadolint hadolint/hadolint --ignore DL3003 --ignore DL3006 --ignore DL3010 --ignore DL4001 --ignore DL3007 --ignore DL3008 --ignore SC2068 --ignore DL3007 --ignore SC1091 --ignore DL3013 --ignore DL3010 $(find . -type f -iname "Dockerfile*")

  # Basefile
  deploy_ghcr_base:
    name: Base
    needs: [hadolint]
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: base-test-pr
      build_baseimage_test: false
      build_baseimage_url: :base/:base-test-pr
      docker_build_file: Dockerfile.base
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  # Next steps are all of the deployments that depend on the base image
  deploy_ghcr_mlat_client:
    needs: [deploy_ghcr_base]
    name: Mlat Client
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: mlatclient-test-pr
      build_baseimage_test: true
      build_baseimage_url: :base/:base-test-pr
      docker_build_file: Dockerfile.mlatclient
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  deploy_ghcr_rtlsdr:
    name: RTLSDR
    needs: [deploy_ghcr_base]
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: rtlsdr-test-pr
      build_baseimage_test: true
      build_baseimage_url: :base/:base-test-pr
      docker_build_file: Dockerfile.rtlsdr
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  deploy_ghcr_planefence_base:
    name: Planefence
    needs: [deploy_ghcr_base]
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: planefence_base-test-pr
      build_baseimage_test: true
      build_baseimage_url: :base/:base-test-pr
      docker_build_file: Dockerfile.planefence_base
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  # deployments that only rely on rtlsdr

  deploy_ghcr_acars-decoder:
    name: ACARS Decoder
    needs: [deploy_ghcr_rtlsdr]
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: acars-decoder-test-pr
      build_baseimage_test: true
      build_baseimage_url: :rtlsdr/:rtlsdr-test-pr
      docker_build_file: Dockerfile.acars-decoder
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  deploy_ghcr_soapy_full:
    name: Soapy Full
    needs: [deploy_ghcr_rtlsdr]
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: soapy-full-test-pr
      build_baseimage_test: true
      build_baseimage_url: :rtlsdr/:rtlsdr-test-pr
      docker_build_file: Dockerfile.soapy-full
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  # deployments that rely on rtlsdr AND mlatclient

  deploy_ghcr_wreadsb:
    name: Wreadsb
    needs: [deploy_ghcr_rtlsdr, deploy_ghcr_mlat_client]
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: wreadsb-test-pr
      build_baseimage_test: true
      build_baseimage_url: :mlatclient/:mlatclient-test-pr/g;s/:rtlsdr/:rtlsdr-test-pr
      docker_build_file: Dockerfile.wreadsb
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  # deployments that rely on just soapy-full

  deploy_ghcr_acars-decoder-soapy:
    name: ACARS Decoder Soapy
    needs: [deploy_ghcr_wreadsb]
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: acars-decoder-soapy-test-pr
      build_baseimage_test: true
      build_baseimage_url: :soapy-full/:soapy-full-test-pr
      docker_build_file: Dockerfile.acars-decoder-soapy
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  # deployments that rely on just wreadsb

  deploy_dump978-full:
    name: Dump978 Full
    needs: [deploy_ghcr_wreadsb]
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/sdre.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: false
      build_latest: true
      docker_latest_tag: dump978-full-test-pr
      build_baseimage_test: true
      build_baseimage_url: :wreadsb/:wreadsb-test-pr
      docker_build_file: Dockerfile.dump978-full
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}

  trigger_build_base:
    name: Trigger deploy of base image
    needs: [deploy_ghcr_base]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
    steps:
      - name: acarshub
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-acarshub deploy.yml -f reason="$WORKFLOW_REASON"
      - name: beast-splitter
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-beast-splitter deploy.yml -f reason="$WORKFLOW_REASON"
      - name: flightradar24
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-flightradar24 deploy.yml -f reason="$WORKFLOW_REASON"
      - name: adsbhub
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-adsbhub deploy.yml -f reason="$WORKFLOW_REASON"
      - name: opensky
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-opensky-network deploy.yml -f reason="$WORKFLOW_REASON"
      - name: planefinder
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-planefinder deploy.yml -f reason="$WORKFLOW_REASON"
      - name: acars_router
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/acars_router deploy.yml -f reason="$WORKFLOW_REASON"
      - name: airspy
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/airspy_adsb deploy.yml -f reason="$WORKFLOW_REASON"
      - name: reversewebproxy
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-reversewebproxy deploy.yml -f reason="$WORKFLOW_REASON"
      - name: radar1090
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-radar1090 deploy.yml -f reason="$WORKFLOW_REASON"
      - name: flightairmap
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-flightairmap deploy.yml -f reason="$WORKFLOW_REASON"

  trigger_build_acars_soapy:
    name: Trigger deploy of acars decoder soapy images
    needs: [deploy_ghcr_acars-decoder-soapy]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
    steps:
      - name: acarsdec
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-acarsdec deploy.yml -f reason="$WORKFLOW_REASON"
      - name: dumpvdl2
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-dumpvdl2 deploy.yml -f reason="$WORKFLOW_REASON"
      - name: dumpvdl2dec
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-vdlm2dec deploy.yml -f reason="$WORKFLOW_REASON"
      - name: dumphfdl
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-dumphfdl deploy.yml -f reason="$WORKFLOW_REASON"
      - name: hfdlobserver
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-hfdlobserver deploy.yml -f reason="$WORKFLOW_REASON"
      - name: rtlsdrairband
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-rtlsdrairband deploy.yml -f reason="$WORKFLOW_REASON"

  trigger_build_planefence:
    name: Trigger deploy of sdr-enthusiasts/docker-planefence
    needs: [deploy_ghcr_planefence_base]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
    steps:
      - name: Planefence
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-planefence deploy.yml -f reason="$WORKFLOW_REASON"

  trigger_build_wreadsb:
    name: Trigger deploy of wreadsb/mlatclient images
    needs: [deploy_ghcr_wreadsb]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
    steps:
      - name: airnav
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-airnavradar deploy.yml -f reason="$WORKFLOW_REASON"
      - name: radarvirtuel
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-radarvirtuel deploy.yml -f reason="$WORKFLOW_REASON"
      - name: tar1090
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-tar1090 deploy.yml -f reason="$WORKFLOW_REASON"
      - name: sdrplay_beast1090
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-sdrplay-beast1090 deploy.yml -f reason="$WORKFLOW_REASON"

  trigger_build_dump978:
    name: Trigger deploy of sdr-enthusiasts/docker-dump978
    needs: [deploy_dump978-full]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
    steps:
      - name: dump978
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-dump978 deploy.yml -f reason="$WORKFLOW_REASON"
      - name: piaware
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-piaware deploy.yml -f reason="$WORKFLOW_REASON"

  trigger_build_rtlsdr:
    name: Trigger deploy rtlsdr images
    needs: [deploy_ghcr_rtlsdr]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
    steps:
      - name: shipfeeder
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-shipfeeder deploy.yml -f reason="$WORKFLOW_REASON"
      - name: aprs-tracker
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-aprs-tracker deploy.yml -f reason="$WORKFLOW_REASON"
      - name: vesselalert
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-vesselalert deploy.yml -f reason="$WORKFLOW_REASON"
      # - name: acars-oxide
      #   run: |
      #     echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
      #     gh workflow run --ref main --repo sdr-enthusiasts/acars-oxide deploy.yml -f reason="$WORKFLOW_REASON"

  trigger_build_mlatclient:
    name: Trigger deploy of sdr-enthusiasts/docker-sdrmap
    needs: [deploy_ghcr_mlat_client]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
    steps:
      - name: sdrmap
        continue-on-error: true
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo sdr-enthusiasts/docker-sdrmap deploy.yml -f reason="$WORKFLOW_REASON"
